
function [ X_dmd E_dmd ] = compute_dmd_reconstruction3( X, modes, lambdas )

% Reconstruct X as a sobreposition of modes
%
% usage: 
%   [ X_dmd E_dmd ] = compute_dmd_reconstruction( X, modes, lambdas )
%
% X       - Data
% modes   - Dynamic Modes
% lambdas - Eigenvalues 
%
% X_dmd - Reconstructions third index represents the number of modes used
% E_dmd - Error
%

% Normalization of dataset and modes 
% This operation will be undone reconstructed dataset
%------------------------------------------------------------------------------%

##  X_mean = mean(X(:));    X = X - X_mean; modes = modes - X_mean;
##  X_max = max(abs(X(:))); X = X / X_max;  modes = modes / X_max;

%------------------------------------------------------------------------------%

  x1 = X(:,1);

  % Number of positions, snapshots and modes
  [ np ns ] = size( X );
  r = size( modes, 2 );

  X_dmd = zeros( np, ns, r );
  E_dmd = zeros( np, ns, r );
  Y     = zeros( np, ns    );

  % Projecting x1 on space generated by the dynamic modes
  A = modes \ x1;

  % Reconstruction with the first mode
  ii = 1;

  Y(:,1) = A(ii) * modes(:,ii);

  for jj = 2:ns
    Y(:,jj) = lambdas(ii) * Y(:,jj-1);
  end

  X_dmd(:,:,ii) = Y;
  E_dmd(:,:,ii) = X - squeeze( X_dmd(:,:,ii) );

  % Adding remaining modes
  for ii = 2:r

     Y(:,1) = A(ii) * modes(:,ii);

     for jj = 2:ns
        Y(:,jj) = lambdas(ii) * Y(:,jj-1);
     end

     X_dmd(:,:,ii) = Y + squeeze( X_dmd(:,:,ii-1) );
     E_dmd(:,:,ii) = X - squeeze( X_dmd(:,:,ii  ) );

  end

##  X_dmd = ( real( X_dmd ) * X_max ) + X_mean;
##  E_dmd = ( real( E_dmd ) * X_max );

    X_dmd = ( real(X_dmd(:,:,end)) );
    E_dmd = ( real( E_dmd ) );
   
end

%------------------------------------------------------------------------------%
